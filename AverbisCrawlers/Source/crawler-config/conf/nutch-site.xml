<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Put site-specific property overrides in this file. -->

<configuration>

<!-- Hadoop setup -->

  <property>
    <name>hadoop.tmp.dir</name>
    <value>tmp/hadoop-${user.name}</value>
  </property>

<!-- Crawler agent setup -->

  <property>
    <name>http.agent.name</name>
    <value>EUCasesCrawler</value>
    <description>HTTP 'User-Agent' request header. MUST NOT be empty - 
    please set this to a single word uniquely related to your organization.

    NOTE: You should also check other related properties:

    http.robots.agents
    http.agent.description
    http.agent.url
    http.agent.email
    http.agent.version

    and set their values appropriately.

    </description>
  </property>

  <property>
    <name>http.robots.agents</name>
    <value>EUCasesCrawler,*</value>
    <description>The agent strings we'll look for in robots.txt files,
    comma-separated, in decreasing order of precedence. You should
    put the value of http.agent.name as the first agent name, and keep the
    default * at the end of the list. E.g.: BlurflDev,Blurfl,*
    </description>
  </property>

  <property>
    <name>http.agent.description</name>
    <value>Open Access Journal Crawler of the EUCases project</value>
    <description>Further description of our bot- this text is used in
    the User-Agent header.  It appears in parenthesis after the agent name.
    </description>
  </property>

  <property>
    <name>http.agent.url</name>
    <value>http://eucases.eu/1588/</value>
    <description>A URL to advertise in the User-Agent header.  This will 
     appear in parenthesis after the agent name. Custom dictates that this
     should be a URL of a page explaining the purpose and behavior of this
     crawler.
    </description>
  </property>

  <property>
    <name>http.agent.email</name>
    <value>florian.schmedding@averbis.com</value>
    <description>An email address to advertise in the HTTP 'From' request
     header and User-Agent header. A good practice is to mangle this
     address (e.g. 'info at example dot com') to avoid spamming.
    </description>
  </property>

  <property>
    <name>http.agent.version</name>
    <value>EUCasesCrawler-1.0</value>
    <description>A version string to advertise in the User-Agent 
     header.</description>
  </property>

  
 <!-- Plugin selection -->

  <property>
    <name>plugin.includes</name>
    <value>protocol-(http|httpclient)|urlfilter-regex|parse-(html|tika)|extractor|outlinkmeta|index-(basic|more)|indexer-eucases|urlnormalizer-(pass|regex|basic)</value>
    <description>Regular expression naming plugin directory names to
    include.  Any plugin not matching this expression is excluded.
    In any case you need at least include the nutch-extensionpoints plugin. By
    default Nutch includes crawling just HTML and plain text via HTTP,
    and basic indexing and search plugins. In order to use HTTPS please enable 
    protocol-httpclient, but be aware of possible intermittent problems with the 
    underlying commons-httpclient library.
    </description>
  </property>

  <property>
    <name>htmlparsefilter.order</name>
    <value>ir.co.bayan.simorq.zal.extractor.nutch.ExtractorParseFilter de.averbis.eucases.outlinkmeta.nutch.parse.OutlinkMetaParseFilter de.averbis.eucases.outlinkmeta.nutch.parse.OutlinkMetaBinaryParseFilter</value>
    <description>The order by which HTMLParse filters are applied.
    If empty, all available HTMLParse filters (as dictated by properties
    plugin-includes and plugin-excludes above) are loaded and applied in system
    defined order. If not empty, only named filters are loaded and applied
    in given order.
    HTMLParse filter ordering MAY have an impact
    on end result, as some filters could rely on the metadata generated by a previous filter.
    </description>
  </property>

  <property>
    <name>indexingfilter.order</name>
    <value>org.apache.nutch.indexer.basic.BasicIndexingFilter org.apache.nutch.indexer.more.MoreIndexingFilter de.averbis.eucases.outlinkmeta.nutch.indexer.OutlinkMetaIndexingFilter</value>
    <description>The order by which index filters are applied.
    If empty, all available index filters (as dictated by properties
    plugin-includes and plugin-excludes above) are loaded and applied in system
    defined order. If not empty, only named filters are loaded and applied
    in given order. For example, if this property has value:
    org.apache.nutch.indexer.basic.BasicIndexingFilter org.apache.nutch.indexer.more.MoreIndexingFilter
    then BasicIndexingFilter is applied first, and MoreIndexingFilter second.
    
    Filter ordering might have impact on result if one filter depends on output of
    another filter.
    </description>
  </property>

  <property>
    <name>scoring.filter.order</name>
    <value>de.averbis.eucases.outlinkmeta.nutch.scoring.OutlinkMetaScoringFilter</value>
    <description>The order in which scoring filters are applied.  This
    may be left empty (in which case all available scoring filters will
    be applied in system defined order), or a space separated list of
    implementation classes.
    </description>
  </property>


<!-- outlinkmeta setup -->

  <property>
    <name>outlinkmeta.urlField</name>
    <value>eucases.article-url</value>
    <description>Key of the parse metadata entry containing an URL that should be annotated.</description>
  </property>
  <property>
    <name>outlinkmeta.urlDescription</name>
    <value>Article PDF Download</value>
    <description>An anchor description for the outlink created from the above URL.</description>
  </property>
  <property>
    <name>outlinkmeta.fields</name>
    <value>eucases.article-title,eucases.article-authors,eucases.article-date,eucases.article-url,eucases.journal,eucases.source</value>
    <description>comma-separated list of parse metadata fields that should be put into the outlink's metadata.</description>
  </property>
  <property>
    <name>outlinkmeta.indexBinary</name>
    <value>true</value>
    <description>If true, the Base64 encoded binary content of the fetched document for the above URL will be made available in the NutchDocument that is send to the indexer.</description>
  </property>
  
  
<!-- Fetcher/HTTP setup -->
  
  <property>
    <name>fetcher.server.delay</name>
    <value>0.005</value>
    <description>The number of seconds the fetcher will delay between 
     successive requests to the same server.</description>
  </property> 
 
  <property>
    <name>parser.skip.truncated</name>
    <value>false</value>
    <description>Boolean value for whether we should skip parsing for truncated documents. By default this 
    property is activated due to extremely high levels of CPU which parsing can sometimes take.  
    </description>
  </property>
  
  <property>
    <name>http.content.limit</name>
    <value>10000000</value>
    <description>The length limit for downloaded content using the http://
    protocol, in bytes. If this value is nonnegative (>=0), content longer
    than it will be truncated; otherwise, no truncation at all. Do not
    confuse this setting with the file.content.limit setting.
    </description>
  </property>

  <property>
    <name>db.fetch.interval.default</name>
    <value>2592000</value><!--<value>2592000</value>-->
    <description>The default number of seconds between re-fetches of a page (30 days).
    </description>
  </property>


<!-- Juridica International lists all articles on a single page -->

  <property>
    <name>db.max.outlinks.per.page</name>
    <value>2000</value>
    <description>The maximum number of outlinks that we'll process for a page.
    If this value is nonnegative (>=0), at most db.max.outlinks.per.page outlinks
    will be processed for a page; otherwise, all outlinks will be processed.
    </description>
  </property>  
 
  
<!-- Parser setup -->

<!-- Utrecht Journal sends some UTF-16 documents declared as UTF-8 -->

  <property>
    <name>encodingdetector.charset.min.confidence</name>
    <value>10</value>
    <description>A integer between 0-100 indicating minimum confidence value
    for charset auto-detection. Any negative value disables auto-detection.
    </description>
  </property>

  <property>
    <name>parser.html.outlinks.ignore_tags</name>
    <value>img,script,link</value>
    <description>Comma separated list of HTML tags, from which outlinks 
    shouldn't be extracted. Nutch takes links from: a, area, form, frame, 
    iframe, script, link, img. If you add any of those tags here, it
    won't be taken. Default is empty list. Probably reasonable value
    for most people would be "img,script,link".</description>
  </property>

<!--

  <property>
    <name>parser.character.encoding.default</name>
    <value>windows-1252</value>
    <description>The character encoding to fall back to when no other information
    is available</description>
  </property>

  <property>
    <name>parser.html.impl</name>
    <value>neko</value>
    <description>HTML Parser implementation. Currently the following keywords
    are recognized: "neko" uses NekoHTML, "tagsoup" uses TagSoup.
    </description>
  </property>
  
-->  


</configuration>
